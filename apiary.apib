FORMAT: 1A
HOST: https://entourage-back-preprod.herokuapp.com/api/v1

# Entourage
Entourage application backend API documentation.

# Group Map
Map related resources of the **Entourage API**
## Map collection [/map{?token,limit,latitude,longitude,distance}]
A single Note object with all its details
+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + limit (optional, number, `15`) ... Max number of pois to return. 45 if not defined
    + latitude (optional, number, `42`) ... Latitude of middle point of the square (for geolocated results)
    + longitude (optional, number, `2`) ... Latitude of middle point of the square (for geolocated results)
    + distance (optional, number, `1`) ... Half side of the result square (for geolocated results)

### Get all map points [GET]

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {"categories":[{"id":1,"name":"Se nourrir"},{"id":2,"name":"Se loger"},{"id":3,"name":"Se soigner"},{"id":4,"name":"Se rafraîchir"},{"id":5,"name":"S'orienter"},{"id":6,"name":"S'occuper de soi"},{"id":7,"name":"Se réinsérer"},{"id":8,"name":"Test"}],
            "pois":[{"id":1,"name":"CASVP (Centre d'action sociale de la Ville de Paris) - Sous-direction de la solidarité et de la lutte contre l'exclusion","description":"Tél. : 01 44 67 18 34 ou 01 44 67 18 28. Fax : 01 44 67 18 71","longitude":2.3696595,"latitude":48.845401,"adress":"5, boulevard Diderot, 75012","phone":"01 44 67 18 34","website":"","email":"","audience":"","category_id":1}]}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

# Group POIs
POI related resources of the **Entourage API**
## Pois collection [/pois]

### List all POIs [GET /pois{?token,latitude,longitude,distance,category_ids}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + latitude (optional, number, `48.853333`) ... The latitude of the center of the box to filter
    + longitude (optional, number, `2.348611`) ... The longitude of the center of the box to filter
    + distance (optional, number, `20.0`) ... The box size to filter (in km)
    + category_ids (optional, list, `1,2`) ... List of coma separated category ids

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"categories":[{"id":1,"name":"Se nourrir"},{"id":2,"name":"Se loger"},{"id":3,"name":"Se soigner"},{"id":4,"name":"Se rafraîchir"},{"id":5,"name":"S'orienter"},{"id":6,"name":"S'occuper de soi"},{"id":7,"name":"Se réinsérer"},{"id":8,"name":"Test"}],
        "pois":[{"id":1,"name":"CASVP (Centre d'action sociale de la Ville de Paris) - Sous-direction de la solidarité et de la lutte contre l'exclusion","description":"Tél. : 01 44 67 18 34 ou 01 44 67 18 28. Fax : 01 44 67 18 71","longitude":2.3696595,"latitude":48.845401,"adress":"5, boulevard Diderot, 75012","phone":"01 44 67 18 34","website":"","email":"","audience":"","category_id":1},{"id":2,"name":"Comité médical pour les exilés (COMEDE)","description":"• Centre de santé Hôpital Bicêtre","longitude":2.3405129,"latitude":48.8725447,"adress":"78, rue du Général-Leclerc, 94270 Le Kremlin-Bicêtre","phone":"","website":"","email":"contact@comede.org","audience":"","category_id":3},{"id":3,"name":"SSDP","description":"Mairie du 1er arr. M° Louvre. Services sociaux départementaux polyvalents (SSDP) : Ouverture du lundi au vendredi 9h-17h. ","longitude":2.3412674,"latitude":48.8600425,"adress":"4, place du Louvre, 75001","phone":"01 44 50 76 40","website":"","email":"","audience":"","category_id":5}]}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

### Create a POI [POST /pois{?token}]

+ Parameters

    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request (application/json; charset=utf-8)

    + Body

            {"poi":{"name":"name","latitude":40.0,"longitude":2.0,"adress":"address","phone":"+33102030405","website":"http://www.poi.com","email":"poi@pois.com","audience":"audience","category_id":1}}

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

            {"poi":{"id":430,"name":"name","description":null,"longitude":2.0,"latitude":40.0,"adress":"address","phone":"+33102030405","website":"http://www.poi.com","email":"poi@pois.com","audience":"audience","validated":false,"category":{"id":1,"name":"Se nourrir"}}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

### Request a change on a POI [POST /pois/{poi_id}/report{?token}]

+ Parameters

    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + poi_id (required, number, `1`) ... identifier of the POI on which a request for change needs to be done

+ Request (application/json; charset=utf-8)

    + Body

            {"message":"Message explaining the change requested on the POI"}

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

        {"message":"Message explaining the change requested on the POI"}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find poi with id 233232"}}

# Group Users
Users related resources of the **Entourage API**

## User login [/login]

### Login user [POST]
+ Request (application/x-www-form-urlencoded; charset=utf-8)

    + Body

            {"user": {"phone": "0605040302", "sms_code": "123456"}}

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"user":{"id":1,
                    "email":"dredd@test.com",
                    "display_name":"Judge Dredd",
                    "first_name": "Judge",
                    "last_name": "Dredd",
                    "about": "I am the Law",
                    "token":"FAKETOKEN",
                    "stats":{"tour_count":0,"encounter_count":0, "entourage_count": 0},
                    "user_type": "pro",
                    "avatar_url": "http://foo.com/bar.jpg",
                    "organization":{"name":"org name",
                                    "description":"org description",
                                    "phone":"org phone",
                                    "address":"org address",
                                    "logo_url":"org logo url"}}}

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Login failed"}}


## Authentication Provider [/authentication_providers]

### Create Authentication Provider [POST]
+ Request (application/x-www-form-urlencoded; charset=utf-8)

    + Body

            {"authentification_provider": {"source": "facebook", "token": "foobar"}}

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"user":{"id":1,
                    "email":"dredd@test.com",
                    "display_name":"Judge Dredd",
                    "first_name": "Judge",
                    "last_name": "Dredd",
                    "about": "I am the Law",
                    "token":"FAKETOKEN"
                    "user_type": "pro",
                    "avatar_url": "http://foo.com/bar.jpg",
                    "organization":nil},
                    "stats":{"tour_count":0,"encounter_count":0, "entourage_count": 0}
                }}

+ Response 401 (application/json; charset=utf-8)

        {"message": "Invalid Facebook token"}

+ Response 401 (application/json; charset=utf-8)

        {"message": "Facebook error : ..."}


## Get details about a user [/users/{user_id}]

### Retrieve details about a user [GET]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"user":
                {
                "id":1,
                "email":"dredd@test.com",
                "display_name":"Judge Dredd",
                "first_name": "Judge",
                "last_name": "Dredd",
                "about": "I am the Law",
                "user_type": "pro",
                "avatar_url": "http://foo.com/bar.jpg"
                }
        }

        user_type : (required, string) ... Type of user : PRO / PUBLIC

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find user with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## Create a new user [/users]

### Signup user [POST]

When signing up a new user we genereate a new sms_code and send it via SMS

+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {"user":{"phone":"0612345678"}}

+ Response 200 (application/json; charset=utf-8)

            {"user":{"id":1,"email":"dredd@test.com","display_name":"Judge Dredd", "first_name": "Judge", "last_name": "Dredd","about": "I am the Law","token":"FAKETOKEN","age ":{"tour_count":0,"encounter_count":0, "entourage_count": 0},"organization":{"name":"org name","description":"org description","phone":"org phone","address":"org address","logo_url":"org logo url"}}}

+ Response 400 (application/json; charset=utf-8)

            {"error": {"code": "PHONE_ALREADY_EXIST", "message" :"Phone +33612345678 n'est pas disponible"}}
            {"error": {"code": "CANNOT_CREATE_USER", "message" :"Phone devrait être au format +33... ou 06..."}}


## Authenticated user ressource [/users/me{?token}]

### Update my user [PATCH]

+ Parameters

    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {"user":{
                "first_name": "Judge",
                "last_name": "Dredd",
                "about": "I am the Law",
                "email": "foo@bar.com",
                "sms_code": "123456",
                "phone": "+33612345678",
                "avatar_key": "unique_id.jpg"
                }
            }

+ Response 200 (application/json; charset=utf-8)

            {"user":{"id":1,"email":"dredd@test.com","display_name":"Judge Dredd", "first_name": "Judge", "last_name": "Dredd","about": "I am the Law","token":"FAKETOKEN","stats":{"tour_count":0,"encounter_count":0, "entourage_count": 0},"organization":{"name":"org name","description":"org description","phone":"org phone","address":"org address","logo_url":"org logo url"}}}

+ Response 400 (application/json; charset=utf-8)

+ Response 401 (application/json; charset=utf-8)


### Delete a user account [DELETE]

+ Parameters

    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        { "user":
            { "id": 2,
            "email": "dredd2@test.com",
            "display_name":"Judge Dredd",
            "status": "accepted",
            "requested_at": "2016-01-01T20:09:06.000+01:00" } }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



## Regenerate user secret code [/users/me/code]

### Regenerate user secret code [PATCH]


+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {user: {phone: "0623456789"}, code: {action: "regenerate"}}

+ Response 200 (application/json; charset=utf-8)

            {"user":{"id":1,"email":"new@e.mail","display_name":"Judge Dredd", "first_name": "Judge", "last_name": "Dredd","about": "I am the Law","token":"153ad0b7ef67e5c44b8ef5afc12709e4","organization":{"name":"Entourage","description":"Réseau Entourage","phone":"+33677300840","address":"40 avenue Hoche 75008 Paris","logo_url":""},"stats":{"tour_count":5,"encounter_count":5, "entourage_count": 0}}}

+ Response 400 (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)

             Unknow phone number : no user with the given phone number could be found


# Group Newsletter
Newsletter subscription related resources of the **Entourage API**

## Newsletter actions [/newsletter_subscriptions]
### Create new subscription [POST]
If the email is already registered to newsletter subscription, a 400 error is returned.
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {"newsletter_subscription":{"email":"newslette@subscription.com","active":true}}

+ Response 201 (application/json; charset=utf-8)

        {"newsletter_subscription":{"email":"newslette@subscription.com","active":true}}

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not create entity","reasons":["Email already exists"]}}

# Group Tours
Tours, or "maraude", are definied only by their type (attribute tour_type).

tour_type should be within ["medical", "barehands", "alimentary"]
status is either "ongoing" or "closed"
vehicle_type is either "feet" or "car"

## Tours collection [/tours{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Retrieve tours [GET /tours{?token,per,type,vehicle_type,latitude,longitude,distance,status}]

+ Parameters
    + per (optional, number, `15`) ... Max number of tours to return. 10 if not defined
    + type: `medical` (optional, string)

        Type of tours to filter

        + Members
            + `medical`
            + `barehands`
            + `alimentary`

    + vehicle_type: `feet` (optional, enum[string])

        Type of tours vehicle types to filter

        + Members
            + `feet`
            + `car`

    + latitude (optional, number, `48.853333`) ... The latitude of the center of the box to filter
    + longitude (optional, number, `2.348611`) ... The longitude of the center of the box to filter
    + distance (optional, number, `20.0`) ... The box size to filter (in km)
    + status (optional, string, `ongoing`) ... Status of the tour

+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"tours":
            [
                {
                    "id":10,
                    "tour_type":"medical",
                    "vehicle_type":"feet",
                    "distance": 8543.65,
                    "organization_name":"organization name",
                    "organization_description":"organization description",
                    "start_time": "2016-01-01T19:09:06.000+01:00",
                    "end_time": "2016-01-01T20:09:06.000+01:00",
                    "tour_points":[
                    {"latitude":1.5,"longitude":1.5},
                    {"latitude":1.6,"longitude":1.6}
                    ],
                    "status":"ongoing",
                    "number_of_people": 1,
                    "author": {
                        "id": 14,
                        "display_name": "Arnaud",
                        "avatar_url": "https://foo.bar"
                    },
                    "join_status": "pending",
                    "number_of_unread_messages": 0
                },
                {
                    "id":11,
                    "tour_type":"medical",
                    "vehicle_type":"feet",
                    "distance": 8543.65,
                    "organization_name":"organization name",
                    "organization_description":"organization description",
                    "start_time": "2016-01-01T19:09:06.000+01:00",
                    "end_time": "2016-01-01T20:09:06.000+01:00",
                    "tour_points":[
                    {"latitude":1.5,"longitude":1.5},
                    {"latitude":1.6,"longitude":1.6}
                    ],
                    "status":"ongoing",
                    "number_of_people": 1,
                    "author": {
                        "id": 14,
                        "display_name": "Arnaud",
                        "avatar_url": "https://foo.bar"
                    },
                    "join_status": "accepted",
                    "number_of_unread_messages": 0
                }
            ]
        }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Create a tour [POST]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "tour": {
                    "tour_type":"medical",
                    "vehicle_type":"feet",
                    "start_time": "2015-07-07T10:31:43.000+02:00"
                }
            }

+ Response 201 (application/json; charset=utf-8)

        {"tour":
            {
                "id":10,
                "tour_type":"medical",
                "vehicle_type":"feet",
                "distance": 8543.65,
                "organization_name":"organization name",
                "organization_description":"organization description",
                "start_time": "2016-01-01T19:09:06.000+01:00",
                "end_time": "2016-01-01T20:09:06.000+01:00",
                "tour_points":[
                {"latitude":1.5,"longitude":1.5},
                {"latitude":1.6,"longitude":1.6}
                ],
                "status":"ongoing",
                "number_of_people": 1,
                "author": {
                    "id": 14,
                    "display_name": "Arnaud",
                    "avatar_url": "https://foo.bar"
                },
                "join_status": "pending",
                "number_of_unread_messages": 0
            }
        }

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not create tour","reasons":["Tour type is not included in the list"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

## Tour [/tours/{id}{?token}]
+ Parameters
    + id (required, integer, `1`) ... Identifier of the tour to be retrieved
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Retrieve a tour [GET]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {   "id":10,
                "tour_type":"medical",
                "vehicle_type":"feet",
                "distance": 8543.65,
                "organization_name":"organization name",
                "organization_description":"organization description",
                "start_time": "2016-01-01T19:09:06.000+01:00",
                "end_time": "2016-01-01T20:09:06.000+01:00",
                "tour_points":[
                {"latitude":1.5,"longitude":1.5},
                {"latitude":1.6,"longitude":1.6}
                ],
                "status":"ongoing",
                "number_of_people": 1,
                "author": {
                    "id": 14,
                    "display_name": "Arnaud",
                    "avatar_url": "https://foo.bar"
                },
                "join_status": "pending",
                "number_of_unread_messages": 0
            }

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find tour with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

### Update a tour [PUT]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {   "tour_type":"medical",
                "vehicle_type":"feet",
                "distance": 8543.65,
                "organization_name":"organization name",
                "organization_description":"organization description",
                "end_time": "2016-01-01T20:09:06.000+01:00",
                "status":"ongoing"
            }


+ Response 200 (application/json; charset=utf-8)

        {   "id":10,
            "tour_type":"medical",
            "vehicle_type":"feet",
            "distance": 8543.65,
            "organization_name":"organization name",
            "organization_description":"organization description",
            "start_time": "2016-01-01T19:09:06.000+01:00",
            "end_time": "2016-01-01T20:09:06.000+01:00",
            "tour_points":[
            {"latitude":1.5,"longitude":1.5},
            {"latitude":1.6,"longitude":1.6}
            ],
            "status":"ongoing",
            "number_of_people": 1,
            "author": {
                "id": 14,
                "display_name": "Arnaud",
                "avatar_url": "https://foo.bar"
            },
            "join_status": "pending",
            "number_of_unread_messages": 0
            }

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find tour with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## Read tour messages [/tours/{id}/read{?token}]
+ Parameters
    + id (required, integer, `1`) ... Identifier of the tour
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Set messages as read [PUT]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)


+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find tour with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## User entourages collection [/users/{user_id}/entourages{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


### Retrieve entourages from user [GET /users/{user_id}/entourages{?token}{&page}{&per}{&distance}{&latitude}{&longitude}{&status}]

+ Parametersparameters to filter
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of tours per page
    + distance (optional, number) ... distance : filter results within a circle with distance radius (in meters)
    + latitude (optional, number) ... latitude : filter results within a circle with this center
    + longitude (optional, number) ... longitude : filter results within a circle with this center
    + status (optional, string) ... status : filter results with tour status

+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"entourages":
            [{  "id": 567,
                "created_at": "2015-07-07T10:31:43.000+02:00",
                "status": "open",
                "title": "entourage1",
                "entourage_type": "ask_for_help",
                "display_category": "social",
                "author": {
                    "id": 123,
                    "display_name": "Seb",
                    "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
                },
                "number_of_people": 2,
                "location": {
                    "latitude": 37.4224764,
                    "longitude": -122.0842499
                },
                "description": "lorem ipsum"
            },
            {   "id": 568,
                "created_at": "2015-07-07T10:31:43.000+02:00",
                "status": "open",
                "title": "entourage1",
                "entourage_type": "ask_for_help",
                "display_category": "social",
                "author": {
                    "id": 123,
                    "display_name": "Seb",
                    "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
                },
                "number_of_people": 2,
                "location": {
                    "latitude": 37.4224764,
                    "longitude": -122.0842499
                },
                "description": "lorem ipsum"
            }
            ]
        }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



## User tours collection [/users/{user_id}/tours{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


### Retrieve tours from user [GET /users/{user_id}/tours{?token}{&page}{&per}{&distance}{&latitude}{&longitude}{&status}]

+ Parametersparameters to filter
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of tours per page
    + distance (optional, number) ... distance : filter results within a circle with distance radius (in meters)
    + latitude (optional, number) ... latitude : filter results within a circle with this center
    + longitude (optional, number) ... longitude : filter results within a circle with this center
    + status (optional, string) ... status : filter results with tour status

+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {"tours":
            [{  "id":10,
                "tour_type":"medical",
                "vehicle_type":"feet",
                "distance": 8543.65,
                "organization_name":"organization name",
                "organization_description":"organization description",
                "tour_points":[],
                "status":"ongoing",
                "join_status": "pending",
                "number_of_unread_messages": 0
            },
            {  "id":11,
                "tour_type":"medical",
                "vehicle_type":"feet",
                "distance": 8543.65,
                "organization_name":"organization name",
                "organization_description":"organization description",
                "tour_points":[],
                "status":"ongoing",
                "join_status": "accepted",
                "number_of_unread_messages": 0
            }
            ]
        }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Tour Users
Resources related to users of a tour
## Tours [/tours/{tour_id}/users{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Get all users from a tour [GET /tours/{tour_id}/users{?token,page,per}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of elements per page

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
            "users": [
                {
                    "id": 1,
                    "email": "dredd@test.com",
                    "display_name":"Judge Dredd",
                    "status": "pending",
                    "requested_at": "2016-01-01T20:09:06.000+01:00"
                },
                {
                    "id": 2,
                    "email": "dredd2@test.com",
                    "display_name":"Judge Dredd",
                    "status": "accepted",
                    "requested_at": "2016-01-01T20:09:06.000+01:00"
                },
                {
                    "id": 3,
                    "email": "dredd3@test.com",
                    "display_name":"Judge Dredd",
                    "status": "rejected",
                    "requested_at": "2016-01-01T20:09:06.000+01:00"
                },
                {
                    "id": 4,
                    "email": "dredd3@test.com",
                    "display_name":"Judge Dredd",
                    "status": "cancelled",
                    "requested_at": "2016-01-01T20:09:06.000+01:00"
                }]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Request to be added to a tour [POST /tours/{tour_id}/users{?token}]

Note: anyone can ask to join a tour

+ Parameters

    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request (application/json; charset=utf-8)

    + Body

            {
                "request" : {
                    "message": "foo bar"
                }
            }

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

        { "user":
            { "id": 2,
            "email": "dredd2@test.com",
            "display_name":"Judge Dredd",
            "status": "accepted",
            "message": "foo bar",
            "requested_at": "2016-01-01T20:09:06.000+01:00" } }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## Tour user [/tours/{tour_id}/users/{user_id}{?token}]

+ Parameters
    + tour_id (required, integer, `1`) ... Identifier of the tour to be retrieved
    + user_id (required, integer, `1`) ... Identifier of the user
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


### Remove a user from a tour [DELETE]

Note : You must be part of the tour to remove someone

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        { "user":
            { "id": 2,
            "email": "dredd2@test.com",
            "display_name":"Judge Dredd",
            "status": "accepted",
            "requested_at": "2016-01-01T20:09:06.000+01:00" } }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Update a tour user status : accept or reject or cancel a user request to join a tour [PUT]

Note : You must be part of the tour to change the status of a user (ex: accept someone in the tour)

+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "user": {
                    "status": "accepted",
                    "message": "lorem ipsum"
                }
            }

+ Response 204 (application/json; charset=utf-8)


+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not update user status","reasons":["Could not find user request"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



# Group Tour Points
Tour points describe the tour itinerary
## Tour Points collection [/tours/{tour_id}/tour_points{?token}]

+ Parameters
    + tour_id (required, integer, `1`) ... Identifier of the tour related to the point
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Create tour points [POST]
+ Request (application/json)

    + Header

            Accept: application/json
    + Body

            {"tour_points":[
                            {"latitude":1.5,"longitude":1.5, "passing_time": "2014-10-11T15:19:45.000+02:00"},
                            {"latitude":2.5,"longitude":2.5, "passing_time": "2014-10-11T15:19:47.000+02:00"}]}

+ Response 201 (application/json; charset=utf-8)

        {"status": "ok"}

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not create tour point","reasons":["Longitude is not a number"]}}

+ Response 401 (applicatidd author and on/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find tour with id 233232"}}

# Group Tour Encounters
Encounters occured during tour
## Tour Encounters collection [/tours/{tour_id}/encounters{?token}]

+ Parameters
    + tour_id (required, integer, `1`) ... Identifier of the tour related to the point
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


### Get all encounters [GET]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "encounters": [{
                    "id":1,
                    "date":"2014-10-11T15:19:45.000+02:00",
                    "latitude":42.0,
                    "longitude":2.0,
                    "user_id":1,
                    "user_name":"Eric",
                    "street_person_name":"jean",
                    "message":"test",
                    "voice_message":"http://www.google.com"
                },
                {
                    "id":2,
                    "date":"2014-10-11T15:19:45.000+02:00",
                    "latitude":42.0,
                    "longitude":2.0,
                    "user_id":1,
                    "user_name":"Eric",
                    "street_person_name":"jean",
                    "message":"test",
                    "voice_message":"http://www.google.com"
                }]
            }


+ Response 401 (application/json; charset=utf-8)

    + Body

            {"error":{"status":401,"message":"Please sign-in"}}


### Create an encounter [POST]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {"encounter":{"street_person_name":"jean",
                            "date":"2014-10-11 15:19:45",
                            "latitude":42,"longitude":2,
                            "message":"test",
                            "voice_message":"http://www.google.com"},
            "answers": [{"question_id": 1, "value": 3},
                        {"question_id": 2, "value": true}]}

+ Response 201 (application/json; charset=utf-8)

    + Body

            {"encounter":{"id":1,"date":"2014-10-11T15:19:45.000+02:00","latitude":42.0,"longitude":2.0,"user_id":1,"user_name":"Eric","street_person_name":"jean","message":"test","voice_message":"http://www.google.com"}}


+ Response 400 (application/json; charset=utf-8)

    + Body

            {"error":{"status":400,"message":"Could not create encouter","reasons":["Date can't be blank","Street person name can't be blank","Latitude can't be blank","Latitude is not a number","Longitude can't be blank","Longitude is not a number"]}}

+ Response 401 (application/json; charset=utf-8)

    + Body

            {"error":{"status":401,"message":"Please sign-in"}}

+ Response 404 (application/json; charset=utf-8)

    + Body

            {"error":{"status":404,"message":"Could not find tour with id 233232"}}



## Single Tour Encounter [/encounters/{id}{?token}]

+ Parameters
    + id (required, integer, `1`) ... id
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Update an encounter [PATCH]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "encounter": {
                    "street_person_name":"jean",
                    "message":"test",
                    "voice_message":"http://www.google.com",
                    "latitude":42,
                    "longitude":2
                }
            }

+ Response 201 (application/json; charset=utf-8)

    + Body

            {"encounter":{"id":1,"date":"2014-10-11T15:19:45.000+02:00","latitude":42.0,"longitude":2.0,"user_id":1,"user_name":"Eric","street_person_name":"jean","message":"test","voice_message":"http://www.google.com"}}


+ Response 400 (application/json; charset=utf-8)

    + Body

            {"error":{"status":400,"message":"Could not create encouter","reasons":["Date can't be blank","Street person name can't be blank","Latitude can't be blank","Latitude is not a number","Longitude can't be blank","Longitude is not a number"]}}

+ Response 401 (application/json; charset=utf-8)

    + Body

            {"error":{"status":401,"message":"Please sign-in"}}

+ Response 404 (application/json; charset=utf-8)

    + Body

            {"error":{"status":404,"message":"Could not find tour with id 233232"}}




# Group Stats
Statistics about the application
## Stats collection [/stats]

### Get all stats [GET]

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {"tours"=>2, "encounters"=>4, "organizations"=>1}


# Group Message
Send message to the Entourage team
## Messages collection [/messages]

### Create a message [POST]

+ Request (application/json; charset=utf-8)

    + Body

            {"message":{"content":"foobar", "display_name":"Judge Dredd", "email": "some@mail.com"}}

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

            {"message":{"content":"foobar", "display_name":"Judge Dredd", "email": "some@mail.com"}}

+ Response 400 (application/json; charset=utf-8)

        {"errors":["Content can't be blank"]}


# Group Registration Request
Manage registration requests from organization who want to join entourage platform
## Registration Request [/registration_requests]

### Create a Registration Request [POST]

+ Request (application/json; charset=utf-8)

    + Body

            {"registration_request": {"organization": {"name":"foo", "local_entity":"bar", "address":"2 rue de l'église", "phone":"+33612345678", "email":"some@email.com", "website_url":"http://foobar.com", "description":"lorem ipsum", "logo_key":"some_key.jpg"}, "user":{"display_name":"Judge Dredd", "phone":"+33612345678", "email":"some@email.com"}}}

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

             {:registration_request:{"id":34, "status":"pending", "extra":"{\"organization\":{\"name\":\"foo\",\"description\":\"lorem ipsum\",\"phone\":\"+33612345678\",\"address\":\"2 rue de l'église\"},\"user\":{\"display_name\":\"Judge Dredd\",\"email\":\"some@email.com\",\"phone\":\"+33612345678\"}}", "created_at":Tue, 08 Dec 2015 15:22:55 CET +01:00, "updated_at":Tue, 08 Dec 2015 15:22:55 CET +01:00}}

+ Response 400 (application/json; charset=utf-8)

        {"errors":{"organization":["Name can't be blank", "Description can't be blank", "Phone can't be blank", "Address can't be blank"], "user":[]}}


# Group Check
Perform checks against the API

## Check [/check]

### Checks that the application version is still valid [GET]


+ Request (application/json; charset=utf-8)

    + Body

    + Headers

            Accept: application/json
            X-API-Key: (required, string, `79499c9d2c45`)

+ Response 200 (application/json; charset=utf-8)

             {"status": "ok"}

+ Response 426 (application/json; charset=utf-8)

        {"message": "Missing API Key or invalid key"}



# Group Feeds
Feeds related resources of the **Entourage API**
## Feeds [/feeds]

tour_types should be a list of values separated by coma, ex: , `tour_types=medical,social,distributive`
entourage_types should be a list of values separated by coma, ex: , `entourage_types=ask_for_help,contribution`
time_range should be a number of hours

### Get all feeds [GET /feeds{?token,longitude,latitude,before,page,per,tour_types,entourage_types,time_range,show_my_entourages_only,show_my_partner_only,distance,announcements}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + before (optional, string) ... pagination : date of the last element to be returned
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of entourages per page
    + longitude (optional, number) ... Filter feed by location
    + latitude (optional, number) ... Filter feed by location
    + tour_types (optional, list) ... Types of tours separated by coma
    + entourage_types (optional, list) ... Types of tours separated by coma
    + show_my_entourages_only (optional, boolean) ... Return only my entourages
    + show_my_partner_only (optional, boolean) ... Return only feed items created by users that support the same partner as me
    + time_range  (optional, number) ... Number of hours to filter
    + distance (optional, number) ... Feed perimeter
    + announcements (optional, enum[string]) ... Set to `v1` to enable feed announcements

+ Request

    + Headers

            Accept: application/jsonparam

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "feeds": [{
                            "type": "Entourage",
                            "data": {
                                "id": 567,
                                "created_at": "",
                                "status": "open",
                                "title": "entourage1",
                                "entourage_type": "ask_for_help",
                                "display_category": "social",
                                "author": {
                                    "id": 123,
                                    "display_name": "Seb",
                                    "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
                                },
                                "number_of_people": 2,
                                "location": {
                                    "latitude": 37.4224764,
                                    "longitude": -122.0842499
                                },
                                "description": "lorem ipsum"
                            },
                            "heatmap_size": 20,
                            "updated_at": "2016-01-01T19:09:06.000+01:00"
                        },
                        {
                            "type": "Announcement",
                            "data": {
                                "id":1,
                                "title": "Une autre façon de contribuer.",
                                "body": "Entourage a besoin de vous pour continuer à accompagner les sans-abri.",
                                "action": "Aider",
                                "url": "http://test.host/api/v1/announcements/1/redirect?token=4a34a0ae28c7fe6e5dcc180e317ed732",
                                "icon_url": "http://test.host/api/v1/announcements/1/icon",
                                "author": {
                                    "id": 123,
                                    "display_name": "Seb",
                                    "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg",
                                    "partner": {
                                        "id": 1,
                                        "name": "ATD Quart Monde",
                                        "large_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/ATDQM-coul-V-fr.png",
                                        "small_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/Badge+image.png",
                                        "default": true
                                    }
                                }
                            }
                        },
                        {
                            "type": "Tour",
                            "data": {
                                "id":10,
                                "tour_type":"medical",
                                "vehicle_type":"feet",
                                "distance": 8543.65,
                                "organization_name":"organization name",
                                "organization_description":"organization description",
                                "start_time": "2016-01-01T19:09:06.000+01:00",
                                "end_time": "2016-01-01T20:09:06.000+01:00",
                                "tour_points":[
                                {"latitude":1.5,"longitude":1.5},
                                {"latitude":1.6,"longitude":1.6}
                                ],
                                "status":"ongoing",
                                "number_of_people": 1,
                                "author": {
                                    "id": 14,
                                    "display_name": "Arnaud",
                                    "avatar_url": "https://foo.bar"
                                },
                                "join_status": "pending",
                                "number_of_unread_messages": 0
                            },
                            "heatmap_size": 20,
                            "updated_at": "2016-01-01T19:09:06.000+01:00"
                        }]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Myfeeds
Feeds related resources of the **Entourage API**
## Feeds [/myfeeds]

tour_types should be a list of values separated by coma, ex: , `tour_types=medical,social,distributive`
entourage_types should be a list of values separated by coma, ex: , `entourage_types=ask_for_help,contribution`
time_range should be a number of hours
status :
active: either created by me or that I joined
closed: either (created and closed by me)

### Get all feeds [GET /myfeeds{?token,page,per,tour_types,entourage_types,time_range,status,created_by_me,accepted_invitation}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of entourages per page
    + tour_types (optional, list) ... Types of tours separated by coma
    + entourage_types (optional, list) ... Types of tours separated by coma : medical,barehands,alimentary
    + time_range (optional, number) ... Number of hours to filter
    + status (optional, string) ... all, active, closed
    + created_by_me (optional, boolean) ... current_user is the author
    + accepted_invitation (optional, boolean) ...
      current_user has accepted an invite to join

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "feeds": [{
                            "type": "Entourage",
                            "data": {
                                "id": 567,
                                "created_at": "",
                                "status": "open",
                                "title": "entourage1",
                                "entourage_type": "ask_for_help",
                                "display_category": "social",
                                "author": {
                                    "id": 123,
                                    "display_name": "Seb",
                                    "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
                                },
                                "number_of_people": 2,
                                "location": {
                                    "latitude": 37.4224764,
                                    "longitude": -122.0842499
                                },
                                "description": "lorem ipsum"
                            },
                            "heatmap_size": 20,
                            "last_message": {
                                "text": "blabla",
                                "author": {
                                    "first_name": "John",
                                    "last_name": "Doe
                                }
                            }
                        },
                        {
                            "type": "Tour",
                            "data": {
                                "id":10,
                                "tour_type":"medical",
                                "vehicle_type":"feet",
                                "distance": 8543.65,
                                "organization_name":"organization name",
                                "organization_description":"organization description",
                                "start_time": "2016-01-01T19:09:06.000+01:00",
                                "end_time": "2016-01-01T20:09:06.000+01:00",
                                "tour_points":[
                                {"latitude":1.5,"longitude":1.5},
                                {"latitude":1.6,"longitude":1.6}
                                ],
                                "status":"ongoing",
                                "number_of_people": 1,
                                "author": {
                                    "id": 14,
                                    "display_name": "Arnaud",
                                    "avatar_url": "https://foo.bar"
                                },
                                "join_status": "pending",
                                "number_of_unread_messages": 0
                            },
                            "heatmap_size": 20},
                            "last_message": null]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



# Group Entourages
Entourages related resources of the **Entourage API**
## Entourages [/entourages]

### Get all entourages [GET /entourages{?token,status,type,latitude,longitude,distance,page,per}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + status (optional, string)
            Status of entourages

            + Members
                + `open`
                + `close`

    + type (optional, string)

            Type of entourages to filter

            + Members
                + `ask_for_help`
                + `contribution`

    + latitude (optional, number, `48.853333`) ... The latitude of the center of the box to filter
    + longitude (optional, number, `2.348611`) ... The longitude of the center of the box to filter
    + distance (optional, number, `20.0`) ... The box size to filter (in km)
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of entourages per page

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "entourages": [
                    {
                        "id": 567,
                        "created_at": "2015-07-07T10:31:43.000+02:00",
                        "status": "open",
                        "title": "entourage1",
                        "entourage_type": "ask_for_help",
                        "display_category": "social",
                        "author": {
                            "id": 123,
                            "display_name": "Seb",
                            "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
                        },
                        "number_of_people": 2,
                        "location": {
                            "latitude": 37.4224764,
                            "longitude": -122.0842499
                        },
                        "description": "lorem ipsum"
                    },
                    {
                        "id": 568,
                        "created_at": "2015-07-07T10:31:43.000+02:00",
                        "status": "open",
                        "title": "entourage1",
                        "entourage_type": "ask_for_help",
                        "display_category": "social",
                        "author": {
                            "id": 123,
                            "display_name": "Seb",
                            "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
                        },
                        "number_of_people": 2,
                        "location": {
                            "latitude": 37.4224764,
                            "longitude": -122.0842499
                        },
                        "description": "lorem ipsum"
                    }
                ]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Create an entourage [POST]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
            "entourage": {
                "title": "entourage1",
                "entourage_type": "ask_for_help",
                "display_category": "social",
                "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                "location" : { "latitude" : 37.4224764, "longitude" : -122.0842499 },
                "description": "lorem ipsum",
                "category": "mat_help"
                }
            }

+ Response 201 (application/json; charset=utf-8)

        { "id": 567, "updated_at": "2015-07-07T10:31:43.000+02:00", "created_at": "2015-07-07T10:31:43.000+02:00", "status": "open", "title": "entourage1", "entourage_type": "ask_for_help", "display_category": "social", "author": { "id": 123, "name": "Seb", "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg" }, "number_of_people": 2, "location": { "latitude": 37.4224764, "longitude": -122.0842499 } },"description": "lorem ipsum"

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not create entourage","reasons":["Entourage type unknown"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

## Entourage [/entourages/{id}{?token}]
+ Parameters
    + id (required, string, `1`) ... Identifier of the entourage to be retrieved. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Retrieve an entourage [GET /{?distance,feed_rank,source}]

+ Parameters
    + distance (required, integer, `1`) ... Distance between user and entourage
    + feed_rank (required, string, `2`) ... Position of the entourage in the feed
    + source (required, string, `newsfeed`) ... data source

+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        { "entourage": {
            "id": 567,
            "updated_at": "2015-07-07T10:31:43.000+02:00",
            "created_at": "2015-07-07T10:31:43.000+02:00",
            "status": "open",
            "title": "entourage1",
            "entourage_type": "ask_for_help",
            "display_category": "social",
            "author": {
                "id": 123,
                "display_name": "Seb",
                "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg"
            },
            "number_of_people": 2,
            "location": {
                "latitude": 37.4224764,
                "longitude": -122.0842499
            },
            "description": "lorem ipsum"
        } }

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find entourage with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}

### Update infos about an entourage [PATCH]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "entourage": {
                    "name": "entourage1",
                    "entourage_type": "ask_for_help",
                    "display_category": "social",
                    "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                    "status": "closed"
                }
            }

+ Response 200 (application/json; charset=utf-8)

        { "id": 567, "updated_at": "2015-07-07T10:31:43.000+02:00", "created_at": "2015-07-07T10:31:43.000+02:00", "status": "open", "title": "entourage1", "entourage_type": "ask_for_help", "display_category": "social", "author": { "id": 123, "name": "Seb", "avatar_url": "https://s3.amazonaws.com/entourage-avatars/image.jpeg" }, "number_of_people": 2, "location": { "latitude": 37.4224764, "longitude": -122.0842499 } }

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not update entourage","reasons":["Entourage type unknown"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



## Read entourage messages [/entourages/{id}/read{?token}]
+ Parameters
    + id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Set messages as read [PUT]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)


+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find entourage with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## Entourage Invitation Collection [/entourages/{id}/invitations{?token}]
+ Parameters
    + id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Invite someone by SMS [POST]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "invite": {
                    "mode": "SMS",
                    "phone_numbers": ["+33612345678", "+3361234569"]
                }
            }

+ Response 201 (application/json; charset=utf-8)

            {
                "successfull_numbers": ["+33612345678", "+3361234569"]
            }

+ Response 400 (application/json; charset=utf-8)

            {
                "successfull_numbers": ["+33612345678"],
                "failed_numbers": ["+3361234569"]
            }

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find entourage with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



# Group Invitations collection

## Entourage Invitation [/invitation/{id}{?token}]

+ Parameters
    + id (required, integer, `1`) ... Identifier of the invitation
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Accept Invitation [PUT]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find invitation with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Refuse Invitation [DELETE]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)

        {"error":{"status":404,"message":"Could not find invitation with id 233232"}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## Users Invitation [/invitations{?token,status}]
+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + status (optional, string, `accepted`) ... filter invitations by status

### List user invitation [GET]
+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

            {
                "invitations": [{
                    "id": 123,
                    "invitation_mode": "SMS",
                    "phone_number": "+33612345678",
                    "inviter": {
                        "id":1,
                        "display_name":"Judge Dredd",
                        "first_name": "Judge",
                        "last_name": "Dredd",
                        "about": "I am the Law",
                        "user_type": "pro",
                        "avatar_url": "http://foo.com/bar.jpg"
                    },
                    "entourage_id": 123,
                    "status": "pending"
                },
                {
                    "id": 123,
                    "invitation_mode": "SMS",
                    "phone_number": "+33612345678",
                    "inviter_id": 123,
                    "entourage_id": 123,
                    "status": "accepted"
                }]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Entourage Users
Resources related to users of an entourage
## Entourages [/entourages/{entourage_id}/users{?token}]

+ Parameters
    + entourage_id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Get all users from an entourage [GET /entourages/{entourage_id}/users{?token,page,per}]

+ Parameters
    + entourage_id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + page (optional, number) ... pagination : page number
    + per (optional, number) ... pagination : number of entourages per page

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
            "users": [
                {
                    "id": 1,
                    "email": "dredd@test.com",
                    "display_name": "Judge Dredd",
                    "status": "pending"
                },
                {
                    "id": 2,
                    "email": "dredd2@test.com",
                    "display_name": "Judge Dredd",
                    "status": "accepted"
                },
                {
                    "id": 3,
                    "email": "dredd3@test.com",
                    "display_name": "Judge Dredd",
                    "status": "rejected"
                },
                {
                    "id": 4,
                    "email": "dredd3@test.com",
                    "display_name": "Judge Dredd",
                    "status": "cancelled"
                }]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Request to be added to an entourage [POST /entourages/{entourage_id}/users{?token}]

+ Parameters
    + entourage_id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request (application/json; charset=utf-8)

    + Body

            {
                "distance": 125.78
            }

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

        { "user": { "id": 2, "email": "dredd2@test.com", "display_name": "Judge Dredd", "status": "accepted" } }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## Entourage user [/entourages/{entourage_id}/users/{user_id}{?token}]

+ Parameters
    + entourage_id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + user_id (required, integer, `1`) ... Identifier of the user inside entourage
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


### Remove a user from an entourage [DELETE]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request

    + Headers

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Update an entourage user status : accept or reject a user request to join an entourage, or add a message to a join request [PUT]

+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "user": {
                    "status": "accepted"
                }
            }

            {
                "request": {
                    "message": "lorem ipsum"
                }
            }


+ Response 204 (application/json; charset=utf-8)


+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not update user status","reasons":["Could not find user request"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Contacts
Contacts related resources of the **Entourage API**
## Contacts [/contacts{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Send user contacts info to find who has an account on Entourage [PUT]

+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
            "contacts": [{
                "phone": "f5e096009dd3f88205a1942ad6e889fcfb642938"
                },
                {
                "phone": "c29772ca36ae7896f11bd5c62f740339ed8bc916"
                }]
            }

+ Response 200 (application/json; charset=utf-8)

        {
        "contacts_found": [{
            "id": 1234,
            "phone": "f5e096009dd3f88205a1942ad6e889fcfb642938"
        }],
        "contacts_not_found": [
            {
            "phone": "c29772ca36ae7896f11bd5c62f740339ed8bc916"
            }]
        }

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not find contacts","reasons":["Malformed request"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Applications

## Applications [/applications{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Add an Application with info about device [PUT]

+ Request (application/json; charset=utf-8)

    + Body

            {"application":{"push_token":"APA91bHSxpidt2SJ33aosTNSlYQMGRyzdt5LFBBSJEhd6zuR9hhe7Qxj00Y_u8og0W7DMaWTU_hWVqUl__yrMq7juuQNKzN689tnCcQKN2LcoJ_09ljgaRFNggfS77Kd0eWfX011oB5S","device_os":"iOS8.1", "version": "1.0"}}

    + Headers

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Questions
Resources  related to questions for the **Entourage API**
## Questions [/questions]

### GET all questions for current user organization [GET]

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {"questions": [{"id": 123, "title": "Question text", "answer_type": "integer"},
                           {"id": 124, "title": "Question text", "answer_type": "string"}]

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group Tour Chat Messages
Resources  related to chat messages for the **Entourage API**
## Chat Messages [/tours/{tour_id}/chat_messages{?token}]

+ Parameters
    + tour_id (required, integer, `1`) ... Identifier of the tour
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### GET all messages for the tour [GET/{?before}]

+ Parameters
    + before (optional, string) ... pagination : date of the last message to be returned

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {"chat_messages": [ {   "id": 123,
                                    "content": "Content text",
                                    "user": {
                                        "id": 456,
                                        "avatar_url": "https://foo.bar"
                                    }
                                    "created_at": "2015-07-07T10:31:43.000+02:00"
                                },
                                {   "id": 124,
                                    "content": "Content text",
                                    "user": {
                                        "id": 457,
                                        "avatar_url": "https://foo.bar"
                                    }
                                    "created_at": "2015-07-07T10:31:43.000+02:00"
                                }]

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Create a chat message for a tour [POST]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
            "chat_message": {
                "content": "Content text"
                }
            }

+ Response 201 (application/json; charset=utf-8)

        {   "id": 123,
            "content": "Content text",
            "user": {
                "id": 456,
                "avatar_url": "https://foo.bar"
            },
            "created_at": "2015-07-07T10:31:43.000+02:00"
        }

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not create message","reasons":["Content is missing"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



# Group Entourages Chat Messages
Resources  related to chat messages for the **Entourage API**
## Chat Messages [/entourages/{entourage_id}/chat_messages{?token}]

+ Parameters
    + entourage_id (required, string, `1`) ... Identifier of the entourage. Can be an integer or an UUID.
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### GET all messages for the entourage [GET/{?before}]

+ Parameters
    + before (optional, string) ... pagination : date of the last message to be returned

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {"chat_messages": [ {   "id": 123,
                                    "content": "Content text",
                                    "user": {
                                        "id": 456,
                                        "avatar_url": "https://foo.bar"
                                    }
                                    "created_at": "2015-07-07T10:31:43.000+02:00"
                                },
                                {   "id": 124,
                                    "content": "Content text",
                                    "user": {
                                        "id": 457,
                                        "avatar_url": "https://foo.bar"
                                    }
                                    "created_at": "2015-07-07T10:31:43.000+02:00"
                                }]

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Create a chat message [POST]
+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
            "chat_message": {
                "content": "Content text"
                }
            }

+ Response 201 (application/json; charset=utf-8)

        {   "id": 123,
            "content": "Content text",
            "user": {
                "id": 456,
                "avatar_url": "https://foo.bar"
            },
            "created_at": "2015-07-07T10:31:43.000+02:00"
        }

+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not create message","reasons":["Content is missing"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



# Group Partners

Resources related to partners

## Partners [/partners{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

### Get all partners [GET]

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "partners": [{
                    "id": 1,
                    "name": "ATD Quart Monde",
                    "large_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/ATDQM-coul-V-fr.png",
                    "small_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/Badge+image.png",
                    "default": true
                }]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}



# Group User Partners

Resources related to partners of a user

## Partners [/users/{user_id}/partners{?token}]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user
    + user_id (required, integer, `1`) ... Identifier of the user

### Get all partners from a user [GET /users/{user_id}/partners{?token}]

+ Parameters
    + user_id (required, integer, `1`) ... Identifier of the user
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "partners": [{
                    "id": 1,
                    "name": "ATD Quart Monde",
                    "large_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/ATDQM-coul-V-fr.png",
                    "small_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/Badge+image.png",
                    "default": true
                }]
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Add a partner to a user [POST /users/{user_id}/partners{?token}]

+ Parameters

    + user_id (required, integer, `1`) ... Identifier of the user
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request (application/json; charset=utf-8)

    + Body

            {
                "partner" : {
                    "id": 3
                }
            }

    + Headers

            Accept: application/json

+ Response 201 (application/json; charset=utf-8)

        {
            "partner": {
                "id": 1,
                "name": "ATD Quart Monde",
                "large_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/ATDQM-coul-V-fr.png",
                "small_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/Badge+image.png",
                "default": true
            }
        }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


## User partner [/users/{user_id}/partners/{partner_id}{?token}]

+ Parameters
    + user_id (required, integer, `1`) ... Identifier of the user to be retrieved
    + partner_id (required, integer, `1`) ... Identifier of the partner
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user


### Remove a partner from a user [DELETE]

+ Parameters
    + token (required, string, `FAKETOKEN`) ... Token identifying the current user

+ Request

    + Headers

            Accept: application/json

+ Response 204 (application/json; charset=utf-8)

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


### Update a user partner [PUT]

+ Request (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "partner": {
                    "default": true
                }
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "partner": {
                        "id": 1,
                        "name": "ATD Quart Monde",
                        "large_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/ATDQM-coul-V-fr.png",
                        "small_logo_url":"https://s3-eu-west-1.amazonaws.com/entourage-ressources/Badge+image.png",
                        "default": true
                }
            }


+ Response 400 (application/json; charset=utf-8)

        {"error":{"status":400,"message":"Could not update user status","reasons":["Could not find user request"]}}

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Please sign-in"}}


# Group CSV Matching

Match entourage users by email hash or phone

## CSV matching [/csv_matching{?source}]

### Get CSV matching [GET /csv_matching{?source,url}]

+ Parameters
    + source (required, string, `ATD`) ... Partner identifier
    + url (required, string, `http://foobar.com/res.csv`) ... Input CSV

+ Request

    + Headers

            Accept: application/json
            Authorization: Basic ABC123

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "csv_url": "http://foobar.com/res.csv"
            }

+ Response 401 (application/json; charset=utf-8)

        {"error":{"status":401,"message":"Invalid authentication"}}