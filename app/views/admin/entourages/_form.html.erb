<style>
  .adress-maps {
    margin-top: 10px;
  }
  .adress-maps img+img {
    margin-left: 10px;
  }
</style>

<%= form_for([:admin, @entourage], :method => :PATCH, html: { class: "form-horizontal", role: "form" }) do |f| %>
  <%= render partial: "layouts/errors", locals: {obj: @entourage} %>

  <div class="control-group">
    <%= f.label :title, "Titre", class: "control-label" %>
    <div class="controls">
      <%= f.text_field :title, class: "form-control", required: true %>
    </div>
  </div>

  <div class="control-group">
    <%= f.label :description, "Description", class: "control-label" %>
    <div class="controls">
      <%= f.text_area :description, rows: 6, class: "form-control", required: true %>
    </div>
  </div>

  <div class="control-group">
    <%= f.label :status, "Status", class: "control-label" %>
    <div class="controls">
      <%= f.select :status, Entourage::ENTOURAGE_STATUS, include_blank: false %>
    </div>
  </div>

  <% if @entourage.public_accessibility_options.count > 1 %>
    <div class="control-group">
      <label class="control-label">Public (pas de join request)</label>
      <div class="controls">
        <label class="radio-inline" style="padding-top: 0; margin-bottom: 5px;">
          <%= f.radio_button :public, true %>
          Oui
        </label>
        <label class="radio-inline" style="padding-top: 0; margin-bottom: 5px;">
          <%= f.radio_button :public, false %>
          Non
        </label>
      </div>
    </div>
  <% end %>

  <% if @entourage.group_type == 'outing' %>
    <%
      timestamps = {
        starts_at: "Date et heure de début",
        ends_at:   "Date et heure de fin"
      }
      minute_step = 5
    %>
    <% timestamps.each do |timestamp, label| %>
      <% datetime = @entourage.metadata[timestamp] %>
      <div class="control-group">
        <label class="control-label"><%= label %></label>
        <div class="controls">
          <%= date_field_tag(
                "metadata[#{timestamp}][date]",
                datetime&.to_date&.to_s,
                required: true) %>
          <%= select_hour(
                datetime&.hour,
                {},
                name: "metadata[#{timestamp}][hour]",
                required: true) %>
          <% minutes = (datetime&.min / minute_step.to_f).round * minute_step %>
          <%= select_minute(
                minutes,
                {minute_step: 5},
                name: "metadata[#{timestamp}][min]",
                required: true) %>
        </div>
      </div>
    <% end %>

    <div class="control-group">
      <label class="control-label" for="metadata_address">Adresse</label>
      <%= text_field_tag nil, @entourage.metadata[:display_address],
          id: :metadata_address,
          class: "form-control",
          required: true,
          data: { last_valid: @entourage.metadata[:display_address] } %>
      <%= hidden_field_tag 'entourage[latitude]', nil, disabled: true %>
      <%= hidden_field_tag 'entourage[longitude]', nil, disabled: true %>
      <%= hidden_field_tag 'entourage[country]', nil, disabled: true %>
      <%= hidden_field_tag 'entourage[postal_code]', nil, disabled: true %>
      <%= hidden_field_tag 'entourage[metadata][place_name]', nil, disabled: true %>
      <%= hidden_field_tag 'entourage[metadata][street_address]', nil, disabled: true %>
      <%= hidden_field_tag 'entourage[metadata][google_place_id]', nil, disabled: true %>
    </div>

  <% end %>

  <% if @entourage.group_type == 'action' %>
  <div class="control-group">
    <%= f.label :display_category, "Catégorie affichée", class: "control-label" %>
    <div class="controls">
      <%= f.select :entourage_type, Entourage::ENTOURAGE_TYPES %>
      <%= f.select :display_category, Entourage::DISPLAY_CATEGORIES, include_blank: true %>
    </div>
  </div>

  <div class="control-group">
    <%= f.label :category, "Catégorie pour l'algorithme de recommandation", class: "control-label" %>
    <div class="controls">
      <%= f.select :category, Entourage::CATEGORIES, include_blank: true %>
    </div>
  </div>

  <div class="control-group">
    <label class="control-label">Adresse</label>
    <div class="controls">
      <input id="autocomplete" value="<%= @entourage.approximated_location %>"
             type="text" class="form-control"></input>
      <%= f.hidden_field :latitude, disabled: true %>
      <%= f.hidden_field :longitude, disabled: true %>
      <div class="adress-maps" id="addressMaps">
        <img src="https://maps.googleapis.com/maps/api/staticmap?zoom=4&size=200x200&markers=<%= @entourage.latitude %>,<%= @entourage.longitude %>&key=AIzaSyDma7aHQ_gPjX55c-V4wEzoRd79LiCenzM" width="200" height="200" />
        <img src="https://maps.googleapis.com/maps/api/staticmap?zoom=13&size=400x200&markers=<%= @entourage.latitude %>,<%= @entourage.longitude %>&key=AIzaSyDma7aHQ_gPjX55c-V4wEzoRd79LiCenzM&style=feature:road|element:labels|visibility:off&style=feature:water|element:labels|visibility:off" width="400" height="200" />
      </div>
    </div>
  </div>
  <% end %>

  <br>
  <%= f.submit "Sauver", class: "btn btn-success" %>
  <%= link_to "Annuler", admin_entourages_path, class: "btn btn-default" %>
<% end %>

<% if @entourage.group_type == 'outing' %>
  <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_FRONTEND_API_KEY'] %>&libraries=places&region=fr&language=fr"></script>

  <script>
    var input = document.getElementById('metadata_address');
    var $input = $(input);
    var options = {
      fields: ['name', 'place_id', 'geometry.location', 'formatted_address', 'address_components']
    };

    autocomplete = new google.maps.places.Autocomplete(input, options);
    autocomplete.addListener('place_changed', function() {
      var place = this.getPlace();

      if (typeof place.place_id === 'undefined') {
        $input.removeClass('is-valid').addClass('is-invalid');
        $input.siblings('input[type=hidden]').prop('disabled', true);
      }
      else {
        $input.data('last-valid', $input.val());
        $input.removeClass('is-invalid').addClass('is-valid');
        $input.siblings('input[type=hidden]').prop('disabled', true);
        var details = {
          google_place_id: place.place_id,
          latitude: place.geometry.location.lat(),
          longitude: place.geometry.location.lng(),
          place_name: place.name,
          street_address: place.formatted_address,
        };
        var component;
        for (var i in place.address_components) {
          component = place.address_components[i];

          if (component.types.indexOf('country') !== -1) {
            details.country = component.short_name;
          }
          else if (component.types.indexOf('postal_code') !== -1) {
            details.postal_code = component.short_name;
          }
        }
        for (var attribute in details) {
          $input.siblings('input[type=hidden][name*="[' + attribute + ']"]')
            .prop('disabled', false)
            .val(details[attribute]);
        }
      }
    });

    $input.on('blur', function() {
      $input.val($input.data('last-valid'));
      $input.removeClass('is-invalid is-valid');
    });

    $input.on('keydown', function(e) {
      if (e.keyCode === 13) {
        e.preventDefault();
      }
    })
  </script>
<% end %>

<% if @entourage.group_type == 'action' %>
<script>
  var autocomplete;

  function initAutocomplete() {
    var $autocomplete = $('#autocomplete');
    autocomplete = new google.maps.places.Autocomplete(
      $autocomplete[0],
      {
        types: ['geocode']
      }
    );

    autocomplete.addListener('place_changed', fillInLocation);
    $autocomplete.on('keypress', function(e) {
      if ((e.keyCode || e.which || e.charCode) === 13) {
        e.preventDefault();
      }
    });
  }

  function fillInLocation() {
    var location = autocomplete.getPlace().geometry.location,
        lat = location.lat(),
        lng = location.lng();

    $('#entourage_latitude').val(lat).prop('disabled', false);
    $('#entourage_longitude').val(lng).prop('disabled', false);
    $('#addressMaps img').each(function(_, map) {
      map.src = map.src.replace(/markers=[^&]*/, 'markers=' + lat + ',' + lng);
    })
  }

  initAutocomplete();
</script>
<% end %>
