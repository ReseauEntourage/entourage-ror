<style>
  .overlay-container {
    position: relative;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
  }

  .overlay-container a:not(.overlay) {
    position: relative;
    z-index: 2;
  }

  #instances {
    background-color: #ddd;
    padding-top: 1px; /* top separator */
  }
  .instance {
    display: flex;
    background-color: #fff;
  }
  #instances.animate,
  #instances.animate .instance {
    transition-duration: 200ms;
  }
  .instance + .instance {
    margin-top: 1px; /* separators */
  }
  .instance > * {
    padding: 8px;
  }
  .instance-id {
    width: 40px;
  }
  .instance-content {
    flex-grow: 1;
  }
  .instance-image {
    width: calc(255px + 8px * 2);
  }

  #instances.reorder {
    padding: 8px;
    margin: -7px -8px 0;
    background-color: #ebecf0;
    border-radius: 3px;
  }
  .reorder .instance {
    box-shadow: 0 1px 0 rgba(9,30,66,.25);
    border-radius: 3px;
    cursor: grab;
  }
  .reorder .instance + .instance {
    margin-top: 8px;
  }
  .reorder .instance:hover {
    background-color: #f4f5f7;
  }
  .reorder .overlay,
  .instance.gu-mirror .overlay {
    display: none;
  }
  .reorder a,
  .instance.gu-mirror a {
    pointer-events: none;
  }

  /* hover?*/
  .instance.gu-transit {
    background-color: rgba(9,30,66,.04);
    box-shadow: none;
  }
  .instance.gu-transit > * {
    visibility: hidden;
  }
  .instance.gu-mirror {
    position: fixed !important;
    z-index: 3;
    transform: rotate(1deg);
    border-radius: 3px;
    box-shadow: 0 12px 24px -6px rgba(9,30,66,.25),0 0 0 1px rgba(9,30,66,.08) !important;
    cursor: grabbing;
  }

  .gu-hide {
    display: none !important;
  }
  .gu-unselectable {
    -webkit-user-select: none !important;
    -moz-user-select: none !important;
    -ms-user-select: none !important;
    user-select: none !important;
  }

  .invisible-searchable-block {
    display: inline-flex;
    width: 20px;
    overflow-y: scroll;
    white-space: nowrap;
    color: transparent;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE */
  }
  .invisible-searchable-block::-webkit-scrollbar {
      display: none; /* Chrome Safari */
  }
</style>

<div class="container">
  <%= render 'header', profile: @profile, fragment: @fragment %>

  <div style="margin: auto">
    <div style="float: right">
      <%= link_to "Ajouter une recommandation", new_admin_recommandation_path, class: "btn btn-default" %>
    </div>

    <% if @status == :active %>
      <div style="margin-left: auto">
        <a href="#" class="btn btn-default btn-sm" id="start-reorder">Modifier l'ordre des cartes</a>
        <a href="#" class="btn btn-default btn-sm hide" id="cancel-reorder">Annuler</a>
        <a href="#" class="btn btn-success btn-sm hide" id="save-reorder">Enregistrer l'ordre des cartes</a>
      </div>
    <% end %>

    <h1>Recommandations</h1>

    <div id="instances">
      <% unless @recommandations.none? %>
        <% @recommandations.each do |recommandation| %>
          <div class="instance overlay-container" data-id="<%= recommandation.id %>">
            <span class="label label-default"><%= recommandation.position_for_profile(@profile) %></span>

            <div class="instance-content" style="width: 100%">
              <div style="font-weight: bold">
                <%= link_to recommandation.name, edit_admin_recommandation_path(recommandation) %>
              </div>
              <div><%= t ("activerecord.attributes.recommandation.instances.#{recommandation.instance}") %></div>
              <div><%= t ("activerecord.attributes.recommandation.actions.#{recommandation.action}") %></div>
              <div><%= status_label recommandation %></div>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>

    <%= page_entries_info @recommandations, entry_name: 'recommandations' %>
    <div class="container">
      <%= paginate(@recommandations) %>
    </div>
  </div>
</div>

<%= form_tag reorder_admin_recommandations_path, class: "hide", id: "reorder-form" do %>
  <%= hidden_field_tag :ordered_ids %>
  <%= hidden_field_tag :fragment, @fragment %>
  <%= hidden_field_tag :profile, @profile %>
<% end %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.js"></script>
<script>
  var Entourage = {} // global state object
  Entourage.reordering = false;

  var instances = document.querySelector('#instances');
  var instanceClass = '.instance';

  dragula([instances], {
    moves: function() {
      return Entourage.reordering
    }
  })

  function toggleReordering(isActive) {
    if (typeof isActive === 'undefined') {
      isActive = !Entourage.reordering
    } else if (isActive == Entourage.reordering) {
      return
    }

    clearTimeout(Entourage.reorderingAnimationTimeout)

    instances.classList.add('animate')

    if (isActive) {
      instances.classList.add('reorder')
    } else {
      instances.classList.remove('reorder')
    }

    Entourage.reorderingAnimationTimeout = setTimeout(function() {
      instances.classList.remove('animate')
    }, 200)

    Entourage.reordering = isActive;
  }

  function getOrderedIds() {
    var ids = []

    for (const instance of instances.querySelectorAll(instanceClass)) {
      ids.push(instance.getAttribute('data-id'))
    }

    return ids;
  }

  var $startReorder = $('#start-reorder'),
      $saveReorder = $('#save-reorder'),
      $cancelReorder = $('#cancel-reorder');

  $startReorder.on('click', function(e) {
    e.preventDefault()

    Entourage.orderBackup = getOrderedIds()
    toggleReordering(true)

    $startReorder.addClass('hide')
    $cancelReorder.removeClass('hide')
    $saveReorder.removeClass('hide')
  });

  $saveReorder.on('click', function(e) {
    e.preventDefault()

    Entourage.reordering = false;

    $cancelReorder.addClass('hide')
    $saveReorder.addClass('disabled')

    var form = document.querySelector('#reorder-form')
    form.querySelector('[name="ordered_ids"]').value = getOrderedIds().join(',')
    form.submit()
  });

  $cancelReorder.on('click', function(e) {
    e.preventDefault()

    toggleReordering(false)

    $saveReorder.addClass('hide')
    $cancelReorder.addClass('hide')
    $startReorder.removeClass('hide')

    var sorted = [];

    for (const instance of instances.querySelectorAll(instanceClass)) {
      var index = Entourage.orderBackup.indexOf(instance.getAttribute('data-id'))
      sorted[index] = instance
    }

    for (const instance of sorted) {
      instances.appendChild(instance)
    }
  })
</script>
